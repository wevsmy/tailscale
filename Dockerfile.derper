# Copyright (c) Tailscale Inc & AUTHORS
# SPDX-License-Identifier: BSD-3-Clause

# Note that this Dockerfile is currently NOT used to build any of the published
# Tailscale container images and may have drifted from the image build mechanism
# we use.
# Tailscale images are currently built using https://github.com/tailscale/mkctr,
# and the build script can be found in ./build_docker.sh.
#
#
# This Dockerfile includes all the tailscale binaries.
#
# To build the Dockerfile:
#
#     $ docker build --platform linux/amd64,linux/arm64 -t tailscale/derper:latest -f Dockerfile.derper .
#
# To run the tailscaled agent:
#
#     $ docker run -d --name=derper -e DERP_DOMAIN=your-hostname.com -e DERP_CERT_MODE=manual -v /app/certs:/tmp/certs -p 3477:443 -p 3478:3478/udp tailscale/derper
#
# | env                    | required | description                                                                 | default value     |
# | -------------------    | -------- | ----------------------------------------------------------------------      | ----------------- |
# | DERP_DOMAIN            | true     | derper server hostname                                                      | your-hostname.com |
# | DERP_CERT_DIR          | false    | directory to store LetsEncrypt certs(if addr's port is :443)                | /app/certs        |
# | DERP_CERT_MODE         | false    | mode for getting a cert. possible options: manual, letsencrypt              | letsencrypt       |
# | DERP_ADDR              | false    | listening server address                                                    | :443              |
# | DERP_STUN              | false    | also run a STUN server                                                      | true              |
# | DERP_STUN_PORT         | false    | The UDP port on which to serve STUN.                                        | 3478              |
# | DERP_HTTP_PORT         | false    | The port on which to serve HTTP. Set to -1 to disable                       | 80                |
# | DERP_VERIFY_CLIENTS    | false    | verify clients to this DERP server through a local tailscaled instance      | false             |
# | DERP_VERIFY_CLIENT_URL | false    | if non-empty, an admission controller URL for permitting client connections | ""                |
# Usage
#
# Fully DERP setup offical documentation: https://tailscale.com/kb/1118/custom-derp-servers/
#
# Client verification
#
# In order to use `DERP_VERIFY_CLIENTS`, the container needs access to Tailscale's Local API, which can usually be accessed through `/var/run/tailscale/tailscaled.sock`. If you're running Tailscale bare-metal on Linux, adding this to the `docker run` command should be enough: `-v /var/run/tailscale/tailscaled.sock:/var/run/tailscale/tailscaled.sock`

# # 构建 amd64 架构
# podman build --arch=amd64 -t efs-docker.pkg.coding.net/public/library/derper:latest-amd64 -f Dockerfile.derper .
# # 构建 arm64 架构
# podman build --arch=arm64 -t efs-docker.pkg.coding.net/public/library/derper:latest-arm64 -f Dockerfile.derper .
# # 推送 amd64 镜像
# podman push efs-docker.pkg.coding.net/public/library/derper:latest-amd64
# # 推送 arm64 镜像
# podman push efs-docker.pkg.coding.net/public/library/derper:latest-arm64
# # 创建 manifest 列表
# podman manifest create efs-docker.pkg.coding.net/public/library/derper:latest
# # 添加各架构镜像到 manifest
# podman manifest add efs-docker.pkg.coding.net/public/library/derper:latest docker://efs-docker.pkg.coding.net/public/library/derper:latest-amd64
# podman manifest add efs-docker.pkg.coding.net/public/library/derper:latest docker://efs-docker.pkg.coding.net/public/library/derper:latest-arm64
# # 推送 manifest
# podman manifest push efs-docker.pkg.coding.net/public/library/derper:latest docker://efs-docker.pkg.coding.net/public/library/derper:latest

FROM golang:1.24-alpine AS build-env

WORKDIR /go/src/tailscale

COPY go.mod go.sum ./
RUN go mod download

# Pre-build some stuff before the following COPY line invalidates the Docker cache.
RUN go install \
    github.com/aws/aws-sdk-go-v2/aws \
    github.com/aws/aws-sdk-go-v2/config \
    gvisor.dev/gvisor/pkg/tcpip/adapters/gonet \
    gvisor.dev/gvisor/pkg/tcpip/stack \
    golang.org/x/crypto/ssh \
    golang.org/x/crypto/acme \
    github.com/coder/websocket \
    github.com/mdlayher/netlink

COPY . .

# see build_docker.sh
ARG VERSION_LONG=""
ENV VERSION_LONG=$VERSION_LONG
ARG VERSION_SHORT=""
ENV VERSION_SHORT=$VERSION_SHORT
ARG VERSION_GIT_HASH=""
ENV VERSION_GIT_HASH=$VERSION_GIT_HASH
ARG TARGETARCH

RUN GOARCH=$TARGETARCH go install -ldflags="\
      -X tailscale.com/version.longStamp=$VERSION_LONG \
      -X tailscale.com/version.shortStamp=$VERSION_SHORT \
      -X tailscale.com/version.gitCommitStamp=$VERSION_GIT_HASH" \
      -v ./cmd/derper ./cmd/derper ./cmd/derper

FROM alpine:3.19

WORKDIR /app

ARG DEBIAN_FRONTEND=noninteractive

RUN apk add --no-cache ca-certificates && mkdir /app/certs

ENV DERP_DOMAIN your-hostname.com
ENV DERP_CERT_MODE letsencrypt
ENV DERP_CERT_DIR /app/certs
ENV DERP_ADDR :443
ENV DERP_STUN true
ENV DERP_STUN_PORT 3478
ENV DERP_HTTP_PORT 80
ENV DERP_VERIFY_CLIENTS false
ENV DERP_VERIFY_CLIENT_URL ""

COPY --from=build-env /go/bin/derper .

CMD /app/derper --hostname=$DERP_DOMAIN \
    --certmode=$DERP_CERT_MODE \
    --certdir=$DERP_CERT_DIR \
    --a=$DERP_ADDR \
    --stun=$DERP_STUN  \
    --stun-port=$DERP_STUN_PORT \
    --http-port=$DERP_HTTP_PORT \
    --verify-clients=$DERP_VERIFY_CLIENTS \
    --verify-client-url=$DERP_VERIFY_CLIENT_URL
